{
  "version": 3,
  "sources": [
    "unknown"
  ],
  "names": [
    "PUZZELSTATE",
    "Dragging",
    "OnTouchMap",
    "OnMap",
    "cc",
    "Class",
    "extends",
    "Component",
    "properties",
    "bgSptiteFrame",
    "type",
    "SpriteFrame",
    "default",
    "cellUp",
    "Prefab",
    "label",
    "Label",
    "onLoad",
    "node",
    "getComponent",
    "Sprite",
    "spriteFrame",
    "isDragging",
    "state",
    "self",
    "touchStart",
    "event",
    "console",
    "log",
    "JSON",
    "stringify",
    "getLocation",
    "setState",
    "parentScript",
    "puzzleCellTouchBegan",
    "touchMove",
    "touchPos",
    "parent",
    "convertTouchToNodeSpace",
    "position",
    "touchEnd",
    "puzzleCellTouchEnd",
    "on",
    "Node",
    "EventType",
    "TOUCH_START",
    "TOUCH_MOVE",
    "TOUCH_END",
    "TOUCH_CANCEL",
    "init",
    "spec",
    "index",
    "string",
    "i",
    "initLine",
    "cellUpPosList",
    "list",
    "v2",
    "angleMap",
    "direction",
    "value",
    "undefined",
    "PuzzleLineType",
    "DOWN",
    "UP",
    "instantiate",
    "setOnMap",
    "setOnTouchMap",
    "getIsOnMap",
    "getIsOnTouchMap"
  ],
  "mappings": "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",
  "file": "unknown",
  "sourcesContent": [
    "import defines from './game_defines'\nconst PUZZELSTATE = {\n    Dragging: 1,\n    OnTouchMap: 2,\n    OnMap: 3\n};\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        bgSptiteFrame: {\n            type: cc.SpriteFrame,\n            default: null\n        },\n        cellUp: {\n            type: cc.Prefab,\n            default: null\n        },\n        label: {\n            type: cc.Label,\n            default: null\n        }\n    },\n\n    // use this for initialization\n    onLoad: function () {\n        this.node.getComponent(cc.Sprite).spriteFrame = this.bgSptiteFrame;\n        this.isDragging = false;\n        this.state = PUZZELSTATE.OnTouchMap;\n        let self = this;\n        const touchStart = function (event) {\n            console.log('touch start =' + JSON.stringify(event.getLocation()));\n            self.isDragging = true;\n            self.setState(PUZZELSTATE.Dragging);\n            self.parentScript.puzzleCellTouchBegan(self);\n\n        };\n        const  touchMove = function (event) {\n            console.log('touch move =' + JSON.stringify(event.getLocation()));\n            if (self.isDragging === true){\n                // self.node.position = self.node.convertTouchToNodeSpace(event.getLocation());\n                let touchPos = self.node.parent.convertTouchToNodeSpace(event);\n                console.log('touch pos = ' + JSON.stringify(touchPos));\n                self.node.position = touchPos;\n            }\n        };\n        const touchEnd = function (event) {\n            console.log('touch end =' + JSON.stringify(event.getLocation()));\n\n            self.isDragging = false;\n            self.parentScript.puzzleCellTouchEnd(self);\n\n\n        };\n\n        this.node.on(cc.Node.EventType.TOUCH_START,touchStart,this.node);\n        this.node.on(cc.Node.EventType.TOUCH_MOVE,touchMove,this.node);\n        this.node.on(cc.Node.EventType.TOUCH_END,touchEnd,this.node);\n        this.node.on(cc.Node.EventType.TOUCH_CANCEL,touchEnd,this.node);\n    }\n    ,\n    init: function (spec, parentScript,index) {\n        this.index = index;\n        this.label.string = index + '';\n        this.parentScript = parentScript;\n        console.log('spec' + JSON.stringify(spec));\n\n        // 根据参数创建方向\n\n\n        for (let i in spec){\n            this.initLine(i ,spec[i]);\n\n        }\n\n\n    },\n    cellUpPosList:function (index) {\n        let list = [\n                cc.v2(0,156),\n                cc.v2(0,-156),\n                cc.v2(-156,0),\n                cc.v2(156,0)\n\n          ];\n       return list[index];\n    } ,\n    angleMap: function (index) {\n        let list = [180, 0, 90, -90];\n        return list[index];\n    }\n    ,\n    initLine: function (direction, value) {\n        //方向 跟值传过来\n\n        console.log('direction = ' + direction);\n        console.log('value = ' + value);\n        if (direction === undefined){\n            return\n        }\n        if (value === undefined){\n            return\n        }\n        if (value === defines.PuzzleLineType.DOWN){\n            return\n        }\n        //\n        if (value === defines.PuzzleLineType.UP){\n            // let node = cc.Node();\n            // node.addComponent(cc.Sprite).spriteFrame = this.cellUp;\n            // node.parent = this.node;\n            //\n            let node = cc.instantiate(this.cellUp);\n            node.parent = this.node;\n            // node.position = this.cellUpPosList(direction);\n            // node.rotation = this.angleMap(direction);\n        }\n        console.log('this。index ' + this.index);\n\n\n    },\n    setOnMap: function () {\n        this.setState(PUZZELSTATE.OnMap);\n    },\n    setOnTouchMap: function () {\n        this.setState(PUZZELSTATE.OnTouchMap);\n    },\n    setState: function (state) {\n        this.state = state;\n    },\n    getIsOnMap : function () {\n        if (this.state === PUZZELSTATE.OnMap){\n            return true;\n        }\n        return false;\n    },\n    getIsOnTouchMap: function () {\n        if (this.state === PUZZELSTATE.OnTouchMap){\n            return true;\n        }\n        return false;\n    }\n});\n"
  ]
}